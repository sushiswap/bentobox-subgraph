enum BentoBoxActionType {
  deposit
  transfer
  withdraw
}

type BentoBoxAction @entity {
  id: ID!
  bentoBox: BentoBox!
  type: BentoBoxActionType!
  from: User!
  to: User!
  token: Token!
  amount: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type BentoBox @entity {
  # Contract ID
  id: ID!
  pairs: [Pair!]! @derivedFrom(field: "bentoBox")
  tokens: [Token!] @derivedFrom(field: "bentoBox")
  WethToken: Bytes!
  transactions: [BentoBoxAction!] @derivedFrom(field: "bentoBox")
  lendingPairsCount: BigInt!
}

type MasterContractApproval @entity {
  # concatenate UserAddress with MasterContract
  id: ID!
  user: User!
  approved: Boolean!
}

enum PairActionType {
  addAsset
  removeAsset
  addCollateral
  removeCollateral
  addBorrow
  removeBorrow
}

type PairAction @entity {
  id: ID!
  type: PairActionType!
  pair: Pair!
  token: Token!
  root: UserPair!
  amount: BigInt!
  fraction: BigInt
  poolPercentage: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type Pair @entity {
  id: ID!
  asset: Token!
  bentoBox: BentoBox!
  collateral: Token!
  decimals: Int!
  dev: Bytes
  exchangeRate: BigInt!
  feeTo: Bytes!
  feesPendingAmount: BigInt!
  interestPerBlock: BigInt!
  lastBlockAccrued: BigInt!
  masterContract: Bytes!
  name: String!
  oracle: Bytes!
  owner: Bytes!
  pendingOwner: Bytes!
  symbol: String!
  totalAssetAmount: BigInt!
  totalAssetFraction: BigInt!
  totalBorrowFraction: BigInt!
  totalBorrowAmount: BigInt!
  totalCollateralAmount: BigInt!
  utilization: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transactions: [PairAction!] @derivedFrom(field: "pair")
}



type Token @entity {
  id: ID!
  bentoBox: BentoBox!
  totalSupply: BigInt!
  name: String!
  symbol: String!
  decimals: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type UserPair @entity {
  # concatenate UserAddress with LendingPairAddress
  id: ID!
  pair: Pair!
  user: User!
  userCollateralAmount: BigInt!
  balanceOf: BigInt!
  userBorrowFraction: BigInt!
  transactions: [PairAction!] @derivedFrom(field: "root")
}

type UserToken @entity {
  # concatenate UserAddress with TokenAddress
  id: ID!
  user: User!
  token: Token!
  amount: BigInt!
}

type User @entity {
  id: ID!
  pairBalances: [UserPair!] @derivedFrom(field: "user")
  tokenBalances: [UserToken!] @derivedFrom(field: "user")
  masterContractApprovals: [MasterContractApproval!] @derivedFrom(field: "user")
  withdrawals: [BentoBoxAction!] @derivedFrom(field: "from")
  deposits: [BentoBoxAction!] @derivedFrom(field: "to")
  block: BigInt!
  timestamp: BigInt!
}